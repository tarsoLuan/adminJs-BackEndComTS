import React, { ReactNode } from 'react';

interface ChartInterface {
    data: any[];
    dimensions: string[];
    metrics: string[];
    className?: string;
    colors?: string[];
    margin?: Margin;
}
interface ScatterChartInterface {
    data: any[];
    xKey: string;
    yKey: string;
    dataKey?: string;
    className?: string;
    colors?: string[];
    margin?: Margin;
}
interface Margin {
    top: number;
    left: number;
    right: number;
    bottom: number;
}

interface AreaChartProps extends ChartInterface {
}

/**
 *
 */
declare const AreaChart: React.FC<AreaChartProps>;

interface BarChartProps extends ChartInterface {
}

declare const BarChart: React.FC<BarChartProps>;

interface BubbleChartProps extends ScatterChartInterface {
}

declare const BubbleChart: React.FC<BubbleChartProps>;

interface LineChartProps extends ChartInterface {
}

declare const LineChart: React.FC<LineChartProps>;

interface ScatterChartProps extends ScatterChartInterface {
}

declare const ScatterChart: React.FC<ScatterChartProps>;

interface PieChartProps extends ChartInterface {
    radius?: number;
}

declare const PieChart: React.FC<PieChartProps>;

interface CardProps {
    className?: string;
    title?: string;
    children?: ReactNode;
}

declare const Card: React.FC<CardProps>;

interface MetricLargeProps {
    className?: string;
    value?: number;
}

declare const MetricLarge: React.FC<MetricLargeProps>;

interface MetricIncrementProps {
    className?: string;
    value?: number;
    percentage?: number;
    description?: string;
}

declare const MetricIncrement: React.FC<MetricIncrementProps>;

interface FrolicResponse {
    data: any[];
}
interface FrolicRequest {
    metrics?: Metric[];
    dimensions?: Dimension[];
    filters?: Filter[];
    orderby?: OrderBy;
    limit?: number;
}
interface Metric {
    field: string;
    aggregate_operator?: string;
    name?: string;
    distinct?: boolean;
}
interface Dimension {
    field: string;
    transformation?: string;
    name?: string;
}
interface Filter {
    dimension: Dimension;
    filter_operator: string;
    filter_value: string;
}
interface OrderBy {
    field: string[];
    order: string;
}

declare const getData: (apiUrl: string, request: FrolicRequest) => Promise<FrolicResponse>;

export { AreaChart, AreaChartProps, BarChart, BarChartProps, BubbleChart, BubbleChartProps, Card, CardProps, ChartInterface, Dimension, Filter, FrolicRequest, FrolicResponse, LineChart, LineChartProps, Margin, Metric, MetricIncrement, MetricIncrementProps, MetricLarge, MetricLargeProps, OrderBy, PieChart, PieChartProps, ScatterChart, ScatterChartInterface, ScatterChartProps, getData };
